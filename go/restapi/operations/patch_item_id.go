// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchItemIDHandlerFunc turns a function with the right signature into a patch item ID handler
type PatchItemIDHandlerFunc func(PatchItemIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchItemIDHandlerFunc) Handle(params PatchItemIDParams) middleware.Responder {
	return fn(params)
}

// PatchItemIDHandler interface for that can handle valid patch item ID params
type PatchItemIDHandler interface {
	Handle(PatchItemIDParams) middleware.Responder
}

// NewPatchItemID creates a new http.Handler for the patch item ID operation
func NewPatchItemID(ctx *middleware.Context, handler PatchItemIDHandler) *PatchItemID {
	return &PatchItemID{Context: ctx, Handler: handler}
}

/*PatchItemID swagger:route PATCH /item/{id} patchItemId

PatchItemID patch item ID API

*/
type PatchItemID struct {
	Context *middleware.Context
	Handler PatchItemIDHandler
}

func (o *PatchItemID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchItemIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
