/*
 * Bellese challenge
 * api for Bellese fullstack challenge
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BelleseChallenge);
  }
}(this, function(expect, BelleseChallenge) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BelleseChallenge.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('itemGet', function() {
        it('should call itemGet successfully', function(done) {
          // TODO: uncomment itemGet call and complete the assertions
          /*

          instance.itemGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BelleseChallenge.Item);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.picture).to.be.a('string');
              expect(data.picture).to.be("");
              {
                let dataCtr = data.keyValueFields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(BelleseChallenge.KeyValue);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('itemIdDelete', function() {
        it('should call itemIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for itemIdDelete call
          /*
          var id = 8.14;

          instance.itemIdDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('itemIdGet', function() {
        it('should call itemIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for itemIdGet call and complete the assertions
          /*
          var id = 8.14;

          instance.itemIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BelleseChallenge.Item);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.picture).to.be.a('string');
            expect(data.picture).to.be("");
            {
              let dataCtr = data.keyValueFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(BelleseChallenge.KeyValue);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('itemIdPatch', function() {
        it('should call itemIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for itemIdPatch call and complete the assertions
          /*
          var id = 8.14;
          var opts = {};
          opts.item = new BelleseChallenge.Item();
          opts.item.name = "";
          opts.item.description = "";
          opts.item.picture = "";
          opts.item.keyValueFields = [new BelleseChallenge.KeyValue()];
          opts.item.keyValueFields[0].name = "";
          opts.item.keyValueFields[0].value = "";

          instance.itemIdPatch(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BelleseChallenge.Item);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.picture).to.be.a('string');
            expect(data.picture).to.be("");
            {
              let dataCtr = data.keyValueFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(BelleseChallenge.KeyValue);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('itemPost', function() {
        it('should call itemPost successfully', function(done) {
          // TODO: uncomment, update parameter values for itemPost call and complete the assertions
          /*
          var opts = {};
          opts.item = new BelleseChallenge.Item();
          opts.item.name = "";
          opts.item.description = "";
          opts.item.picture = "";
          opts.item.keyValueFields = [new BelleseChallenge.KeyValue()];
          opts.item.keyValueFields[0].name = "";
          opts.item.keyValueFields[0].value = "";

          instance.itemPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(BelleseChallenge.Item);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.picture).to.be.a('string');
            expect(data.picture).to.be("");
            {
              let dataCtr = data.keyValueFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(BelleseChallenge.KeyValue);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
